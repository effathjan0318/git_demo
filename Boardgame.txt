import java.util.*;

public class Boardgame {
    private static final int[][] DIRECTIONS = {
        {1, 0}, {0, 1}, {-1, 0}, {0, -1}
    };

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int M = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] grid = new int[M][N];
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                grid[i][j] = scanner.nextInt();
            }
        }
        int sourceX = scanner.nextInt();
        int sourceY = scanner.nextInt();
        int destX = scanner.nextInt();
        int destY = scanner.nextInt();
        int moveX = scanner.nextInt();
        int moveY = scanner.nextInt();
        int result = bfs(grid, M, N, sourceX, sourceY, destX, destY, moveX, moveY);
        System.out.print(result);  
    }

    private static int bfs(int[][] grid, int M, int N, int sourceX, int sourceY, int destX, int destY, int moveX, int moveY) {
        if (grid[sourceX][sourceY] == 1 || grid[destX][destY] == 1) {
            return -1;
        }
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[M][N];
        queue.add(new int[]{sourceX, sourceY, 0});
        visited[sourceX][sourceY] = true;
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int cx = current[0], cy = current[1], dist = current[2];
            if (cx == destX && cy == destY) {
                return dist;
            }
            int[][] possibleMoves = {
                {moveX, moveY}, {moveY, -moveX}, {-moveY, moveX}, {-moveX, -moveY}
            };
            for (int[] move : possibleMoves) {
                int nx = cx + move[0];
                int ny = cy + move[1];
                if (nx >= 0 && nx < M && ny >= 0 && ny < N && !visited[nx][ny] && grid[nx][ny] == 0) {
                    visited[nx][ny] = true;
                    queue.add(new int[]{nx, ny, dist + 1});
                }
            }
        }
        return -1;
    }
}
